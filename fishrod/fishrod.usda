#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (2.5, 2.5, 1.9999999999999996)
                double3 target = (-2.3868229614976144e-8, -2.3868229170886934e-8, 1.000000119341152)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def "Render" (
    hide_in_stage_window = true
    no_delete = true
)
{
    def "OmniverseKit"
    {
        def "HydraTextures" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            def RenderProduct "omni_kit_widget_viewport_ViewportTexture_0" (
                prepend apiSchemas = ["OmniRtxSettingsCommonAdvancedAPI_1", "OmniRtxSettingsRtAdvancedAPI_1", "OmniRtxSettingsPtAdvancedAPI_1", "OmniRtxPostColorGradingAPI_1", "OmniRtxPostChromaticAberrationAPI_1", "OmniRtxPostBloomPhysicalAPI_1", "OmniRtxPostMatteObjectAPI_1", "OmniRtxPostCompositingAPI_1", "OmniRtxPostDofAPI_1", "OmniRtxPostMotionBlurAPI_1", "OmniRtxPostTvNoiseAPI_1", "OmniRtxPostTonemapIrayReinhardAPI_1", "OmniRtxPostDebugSettingsAPI_1", "OmniRtxDebugSettingsAPI_1"]
                hide_in_stage_window = true
                no_delete = true
            )
            {
                rel camera = </OmniverseKit_Persp>
                token omni:rtx:background:source:texture:textureMode = "repeatMirrored"
                token omni:rtx:background:source:type = "domeLight"
                bool omni:rtx:post:registeredCompositing:invertColorCorrection = 1
                bool omni:rtx:post:registeredCompositing:invertToneMap = 1
                bool omni:rtx:pt:lightcache:cached:dontResolveConflicts = 1
                int omni:rtx:pt:maxSamplesPerLaunch = 2073600
                int omni:rtx:pt:mgpu:maxPixelsPerRegionExponent = 12
                color3f omni:rtx:rt:ambientLight:color = (0.1, 0.1, 0.1)
                bool omni:rtx:rt:demoire = 0
                bool omni:rtx:rt:ecoMode:enabled
                bool omni:rtx:rt:lightcache:spatialCache:dontResolveConflicts = 1
                uint omni:rtx:viewTile:limit = 4294967295
                rel orderedVars = </Render/Vars/LdrColor>
                custom bool overrideClipRange = 0
                uniform int2 resolution = (1280, 720)
            }
        }
    }

    def RenderSettings "OmniverseGlobalRenderSettings" (
        prepend apiSchemas = ["OmniRtxSettingsGlobalRtAdvancedAPI_1", "OmniRtxSettingsGlobalPtAdvancedAPI_1"]
        no_delete = true
    )
    {
        rel products = </Render/OmniverseKit/HydraTextures/omni_kit_widget_viewport_ViewportTexture_0>
    }

    def "Vars"
    {
        def RenderVar "LdrColor" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            uniform string sourceName = "LdrColor"
        }
    }
}

def PhysicsScene "physicsScene" (
    prepend apiSchemas = ["PhysxSceneAPI"]
)
{
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81
    uniform token physxScene:broadphaseType = "MBP"
    bool physxScene:enableCCD = 1
    bool physxScene:enableGPUDynamics = 0
    bool physxScene:enableStabilization = 0
    uniform token physxScene:solverType = "TGS"
    uint physxScene:timeStepsPerSecond = 60
}

def "World"
{
    def PhysicsScene "physicsScene" (
        prepend apiSchemas = ["PhysxSceneAPI"]
    )
    {
        vector3f physics:gravityDirection = (0, 0, -1)
        float physics:gravityMagnitude = 83.74642
        float physxScene:bounceThreshold = 0.2
        bool physxScene:enableStabilization = 1
        uniform uint physxScene:maxPositionIterationCount = 16
        uniform uint physxScene:maxVelocityIterationCount = 4
    }

    def Mesh "GroundPlane" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI"]
    )
    {
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        bool physics:kinematicEnabled = 1
        point3f[] points = [(-10, -10, 0), (10, -10, 0), (10, 10, 0), (-10, 10, 0)]
    }

    def "Materials"
    {
        def Material "brown_mat"
        {
            token outputs:surface.connect = </World/Materials/brown_mat/surface.outputs:surface>

            def Shader "surface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.4, 0.2, 0.1)
                token outputs:surface
            }
        }

        def Material "yellow_mat"
        {
            token outputs:surface.connect = </World/Materials/yellow_mat/surface.outputs:surface>

            def Shader "surface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0.8, 0)
                token outputs:surface
            }
        }

        def Material "ground_mat"
        {
            token outputs:surface.connect = </World/Materials/ground_mat/surface.outputs:surface>

            def Shader "surface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                token outputs:surface
            }
        }
    }

    def Cube "Base" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI"]
    )
    {
        bool physics:kinematicEnabled = 1
        double size = 0.1
        quatf xformOp:orient = (0.9914449, 0, -0.13052619, 0)
        double3 xformOp:translate = (0, 0, 0.05000000074505806)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient"]
    }

    def Xform "Rod"
    {
        quatf xformOp:orient = (0.9914449, 0, -0.13052619, 0)
        double3 xformOp:translate = (0, 0, 0.10000000149011612)
        uniform token[] xformOpOrder = ["xformOp:orient", "xformOp:translate"]

        def Cylinder "Segment0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
        )
        {
            double height = 0.5
            rel material:binding = </World/Materials/brown_mat>
            vector3f physics:angularVelocity = (0, 0, 0)
            float physics:mass = 0.0058904863
            vector3f physics:velocity = (0, 0, 0)
            double radius = 0.025
            double3 xformOp:translate = (0, 0, 0.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Cylinder "Segment1" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
        )
        {
            double height = 0.5
            rel material:binding = </World/Materials/brown_mat>
            vector3f physics:angularVelocity = (0, 0, 0)
            float physics:mass = 0.0058904863
            vector3f physics:velocity = (0, 0, 0)
            double radius = 0.025
            double3 xformOp:translate = (0, 0, 0.75)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Cylinder "Segment2" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
        )
        {
            double height = 0.5
            rel material:binding = </World/Materials/brown_mat>
            vector3f physics:angularVelocity = (0, 0, 0)
            float physics:mass = 0.0058904863
            vector3f physics:velocity = (0, 0, 0)
            double radius = 0.025
            double3 xformOp:translate = (0, 0, 1.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Cylinder "Segment3" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
        )
        {
            double height = 0.5
            rel material:binding = </World/Materials/brown_mat>
            vector3f physics:angularVelocity = (0, 0, 0)
            float physics:mass = 0.0058904863
            vector3f physics:velocity = (0, 0, 0)
            double radius = 0.025
            double3 xformOp:translate = (0, 0, 1.75)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Cube "Payload" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Materials/yellow_mat>
            vector3f physics:angularVelocity = (0, 0, 0)
            float physics:mass = 0.016
            vector3f physics:velocity = (0, 0, 0)
            double size = 0.1
            double3 xformOp:translate = (0, 0, 2.049999952316284)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }

    def "Joints"
    {
        def PhysicsFixedJoint "BaseJoint"
        {
            rel physics:body0 = </World/Base>
            rel physics:body1 = </World/Rod/Segment0>
            point3f physics:localPos0 = (0, 0, 0.05)
            point3f physics:localPos1 = (0, 0, -0.25)
        }

        def PhysicsRevoluteJoint "Joint_0_1" (
            prepend apiSchemas = ["PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0.3
            float drive:angular:physics:stiffness = 3.2
            uniform token physics:axis = "Y"
            rel physics:body0 = </World/Rod/Segment0>
            rel physics:body1 = </World/Rod/Segment1>
            point3f physics:localPos0 = (0, 0, 0.25)
            point3f physics:localPos1 = (0, 0, -0.25)
        }

        def PhysicsRevoluteJoint "Joint_1_2" (
            prepend apiSchemas = ["PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0.3
            float drive:angular:physics:stiffness = 1.8
            uniform token physics:axis = "Y"
            rel physics:body0 = </World/Rod/Segment1>
            rel physics:body1 = </World/Rod/Segment2>
            point3f physics:localPos0 = (0, 0, 0.25)
            point3f physics:localPos1 = (0, 0, -0.25)
        }

        def PhysicsRevoluteJoint "Joint_2_3" (
            prepend apiSchemas = ["PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:stiffness = 0.005
            uniform token physics:axis = "Y"
            rel physics:body0 = </World/Rod/Segment2>
            rel physics:body1 = </World/Rod/Segment3>
            point3f physics:localPos0 = (0, 0, 0.25)
            point3f physics:localPos1 = (0, 0, -0.25)
        }

        def Sphere "PayloadD6Joint_intermediate_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            float physics:mass = 0.001
            double radius = 0.005
            double3 xformOp:translate = (0, 0, 0.15000000596046448)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def PhysicsRevoluteJoint "PayloadD6Joint_X_0" (
            prepend apiSchemas = ["PhysicsDriveAPI:angular", "PhysxJointAPI"]
        )
        {
            float drive:angular:physics:damping = 8
            float drive:angular:physics:stiffness = 80
            float drive:angular:physics:targetPosition = 0
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </World/Rod/Segment3>
            rel physics:body1 = </World/Joints/PayloadD6Joint_intermediate_0>
            float physics:breakForce = 10
            point3f physics:localPos0 = (0, 0, 0.25)
            point3f physics:localPos1 = (0, 0, 0)
            float physics:lowerLimit = -0.5235988
            float physics:upperLimit = 0.5235988
        }

        def Sphere "PayloadD6Joint_intermediate_1" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            float physics:mass = 0.001
            double radius = 0.005
            double3 xformOp:translate = (0, 0, 0.05000000074505806)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def PhysicsRevoluteJoint "PayloadD6Joint_Y_1" (
            prepend apiSchemas = ["PhysicsDriveAPI:angular", "PhysxJointAPI"]
        )
        {
            float drive:angular:physics:damping = 6
            float drive:angular:physics:stiffness = 400
            float drive:angular:physics:targetPosition = 0
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Y"
            rel physics:body0 = </World/Joints/PayloadD6Joint_intermediate_0>
            rel physics:body1 = </World/Joints/PayloadD6Joint_intermediate_1>
            float physics:breakForce = 10
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            float physics:lowerLimit = -0.5235988
            float physics:upperLimit = 0.5235988
        }

        def PhysicsRevoluteJoint "PayloadD6Joint_Z_2" (
            prepend apiSchemas = ["PhysicsDriveAPI:angular", "PhysxJointAPI"]
        )
        {
            float drive:angular:physics:damping = 4
            float drive:angular:physics:stiffness = 200
            float drive:angular:physics:targetPosition = 0
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "Z"
            rel physics:body0 = </World/Joints/PayloadD6Joint_intermediate_1>
            rel physics:body1 = </World/Rod/Payload>
            float physics:breakForce = 10
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, -0.05)
            float physics:lowerLimit = -1.5707964
            float physics:upperLimit = 1.5707964
        }
    }
}

def Xform "Environment" (
    prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/5.0/Isaac/Environments/Grid/default_environment.usd@
)
{
}

